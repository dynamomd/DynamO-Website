<?php
  global $syntaxhighlighter;
  $syntaxhighlighter=1;
  pagestart("Tutorial 2: Running a Simulation of Hard Spheres"); 
?>
<div style="float:right; width:50%; max-width:500px">
  <div class="video-container" style="padding-bottom: 62.5%;" >
    <video controls >
      <source src="/videos/hardspheres.mp4" type='video/mp4' />
      <source src="/videos/hardspheres.ogg" type='video/ogg' />
      <iframe width="266" height="160" src="https://www.youtube-nocookie.com/embed/tn6Cz0tNPuU" allowfullscreen frameborder="0"></iframe>
    </video>
  </div>
</div>
<p>
  In this tutorial, we will cover the basics of using DynamO, and
  learn how to simulate the simplest event driven system, the hard
  sphere fluid with periodic boundary conditions.
</p>
<p>
  A video of this system and what is covered in this tutorial is
  presented to the right.  At first, the hard spheres are shown in
  their initial configuration generated by the <b>dynamod</b>
  tool. 1372 particles are placed on a regular FCC lattice and
  assigned random velocities.
</p>
<p>
  Once the simulation is started (using the <b>dynarun</b> program),
  the lattice structure rapidly disappears. However, it is obvious
  from the still-quite-clear color banding that the particles have not
  moved very far. The system still has a memory of its initial
  configuration and we will need to equilibrate the system before we
  collect data.
</p>
<p>
  To equilibrate the system, the simulation is then set to run at full
  speed for a few thousand collisions and then slowed down again to
  take a look at the results. We can see that the simulation has
  equilibrated well and the colored particles are well mixed.
</p>
<p>
  Let's take a look at how to perform this simulation in DynamO...
</p>
<h1>1. Verifying your DynamO Installation</h1>
<p>
  Please ensure that you have already followed
  the <a href="/index.php/tutorial1">previous tutorial</a> and
  compiled and installed your own copy of DynamO.
</p>
<p>
  We'll start off by testing if you successfully compiled and
  installed DynamO. Open up a terminal and run the following command:
</p>
<pre class="brush: shell; ">dynamod</pre>
<p>
  You may need to change this path to wherever you installed the
  dynamo binaries. If everything is working correctly, you should see
  the copyright notice and the descriptions of the options of the
  dynamod program:
</p>
<script type="syntaxhighlighter" class="brush: plain"><![CDATA[
dynamod  Copyright (C) 2011  Marcus N Campbell Bannerman
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the licence you obtained with
the code
Usage : dynamod <OPTIONS>...[CONFIG FILE]
....]]></script>
<p>
  If you do not see the above output, please double check that you
  encountered no errors when building dynamo. Return to
  the <a href="/index.php/tutorial1">previous tutorial</a> and recheck
  the output of the <b>make</b> command.
</p>
<p>
  We're now ready to run our first simulation.
</p>
<h1>2. In Brief</h1> 
<p>
  Lets quickly cover the content of this tutorial now, and afterwards
  we'll go into the detail of each step. Let us say that you want to
  run a hard-sphere simulation of 1372 particles at a reduced density
  of 0.5 and a temperature of 1.
</p>
<p>
  You want to create the system, and then run it for 10<sup>6</sup>
  collisions to equilibrate, then another 10<sup>6</sup> collisions to
  collect some data for your research. All you have to do is run the
  following commands in your terminal/shell:
</p>
<pre class="brush: shell; ">#Create the configuration
dynamod -m 0 -C 7 -d 0.5 -r 1 -o config.start.xml

#A "equilibration run" to equilibrate the configuration
dynarun config.start.xml -c 1000000 -o config.equilibrated.xml

#A "production run" to collect data on the system
dynarun config.equilibrated.xml -c 1000000 -o config.end.xml</pre>
<p>
  But what were those three commands and what do the options/switches
  (-c -o -m) control? We'll look at each command individually in the
  following sections.
</p>
<h1>2. Configuration files and dynamod</h1>
<p>
  The first step in the brief example was to create the
  initial <b>configuration file</b>, called <em>config.start.xml</em>,
  using <b>dynamod</b>.
</p>
<pre class="brush: shell; ">dynamod -m 0 -C 7 -d 0.5 -r 1 -o config.start.xml</pre>
<p>
 In this section,
  we will learn about the configuration files of DynamO, which are the
  main input and output of DynamO, and how to generate configuration
  files using <b>dynamod</b>.
</p>
<h2>2.1. About the configuration file</h2>
<p>
  Before we can run any simulations with DynamO, we must write or
  generate a configuration file. A configuration file is a single file
  which contains all of the parameters of the system.
</p>
<p>
  The configuration file format is used for...
</p>
<ul>
  <li>
    ...the starting point for a simulation.
  </li>
  <li>
    ...for saving any snapshots of the system while it is being simulated.
  </li>
  <li>
    ...for saving the final state of the simulation for continuing it later. 
  </li>
</ul>
<p>
  <b>Every single parameter of the system is set in a configuration
  file</b>, including the particle positions, interactions, boundary
  conditions and solver details. Many other simulation packages
  usually place some of this information in several different files,
  but DynamO only uses one file. Lets take a look at how we can
  generate a configuration file...
</p>
<h2 >2.2. Generating Configuration Files Using Dynamod</h2>
<p>
  <b>dynamod</b> is a program designed to manipulate existing
  configuration files or to generate example configuration files. We
  can take a look at the options of <b>dynamod</b> using
  the <em>--help</em> option:
</p>
<pre class="brush: shell; ">dynamod --help</pre>
<p>
  There are many options available and a lot are related to modifying
  existing configurations (this is why it is called dyna<b>mod</b>),
  but if we want to generate a configuration we are only need to be
  interested in the bottom section which starts with:
</p>
<pre class="brush: shell; ">
...
Packer options:
  -m [ --pack-mode ] arg    Chooses the system to pack (construct)
                            Packer Modes:
                            0:  Monocomponent hard spheres
                            1:  Mono/Multi-component square wells
                            2:  Random walk of an isolated attractive polymer
...
</pre>
<p>
  This section is a list of the built in example configurations
  that <b>dynamod</b> can produce.  We ask <b>dynamod</b> to generate
  any one of the configurations listed there using
  the <em>--pack-mode</em> option (or <em>-m</em> for short).
</p>
<p>
  As this is a tutorial on hard spheres, we will need to use mode
  0. Once you have selected your pack-mode, you can request more
  information on its specific options by using the <em>--help</em>
  option again in combination with the selected <em>--pack-mode</em>:
</p>
<pre class="brush: shell; ">dynamod -m0 --help</pre>
<p>
 And you should get the following output:
</p>
<pre class="brush: plain">
Mode 0: Monocomponent hard spheres
 Options
  -C [ --NCells ] arg (=7)    Set the default number of lattice unit-cells in each direction.
  -x [ --xcell ] arg          Number of unit-cells in the x dimension.
  -y [ --ycell ] arg          Number of unit-cells in the y dimension.
  -z [ --zcell ] arg          Number of unit-cells in the z dimension.
  --rectangular-box           Set the simulation box to be rectangular so that the x,y,z cells also specify the simulation aspect ratio.
  -d [ --density ] arg (=0.5) System density.
  --i1 arg (=FCC)             Lattice type (0=FCC, 1=BCC, 2=SC)
  --i2 arg (disabled)         Adds a temperature rescale event every x events
  --f1 arg (=1.0)             Sets the elasticity of the hard spheres
</pre>
<p>
  What you can see here are a list of options with their default
  values in parenthesis, so if you run
</p>
<pre class="brush: shell; ">dynamod -m0 -o config.start.xml.bz2</pre>
<p>
  It will actually output the same result as running the following
  command.
</p>
<pre class="brush: shell; ">dynamod -m0 -C 7 -d 0.5 --i1 0 --f1 1.0 -o config.start.xml.bz2</pre>
<h2>2.3. Initial Positions and Crystal structures</h2>
<div class="figure" style="width:250px;">
  <a href="/images/tut1_initialpos.jpg">
    <img height="250px" width="250px" alt="Image of hard spheres arranged in an FCC lattice." src="/images/tut1_initialpos.jpg"/>
  </a>
  <div class="caption">
    The default FCC hard sphere system generated by dynamod.
  </div>
</div>
<p>
  Most of the options for this <em>--pack-mode</em> (and many other
  pack modes) control the initial positions of the hard sphere
  particles.
</p>
<p>
  You need to place the particles in a structure which will minimise
  the chance of overlaps or, to put it another way, will maximise the
  spacing between all particles. Such structures occur frequently in
  nature and they're called <b>crystal structures</b>. You can take a
  look
  at <a href="http://en.wikipedia.org/wiki/Close-packing_of_spheres">wikipedia's
  article on the closest way to pack spheres</a> for more information.
</p>
<p>
  For mono-sized spheres, there are three popular
  <a href="http://en.wikipedia.org/wiki/Cubic_crystal_system">cubic
  crystal structures</a> which are used by simulators to initially
  position particles. There is Face-Centered Cubic (FCC),
  Body-Centered Cubic (BCC), and the Simple (or Primitive) Cubic (SC).
</p>
<p>
  The FCC crystal is favoured for producing the initial particle
  positions as it is the naturally-forming crystal structure of
  single-sized hard-spheres. Thus, it gives the closest packing you
  can physically achieve without generating overlaps.
</p>
<p>
  So, back to <b>dynamod</b>. When you pass <em>-C7 --i1 0</em>
  to <b>dynamod</b> you are asking dynamo to produce a 7x7x7 FCC
  lattice and place a single particle on each lattice site.
</p>
<p>
  As the FCC lattice has 4 unique sites per unit cell, this will
  result in N=4x7x7x7=1372 particles being generated. The size of the
  particles is then scaled to match the density passed (<em>-d
  0.5</em>).
</p>
  <?php pageend(); ?>
